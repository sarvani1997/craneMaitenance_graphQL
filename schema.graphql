# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  password: PasswordState
  phone: String
  role: String
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  phone: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  password: PasswordFilter
  phone: StringFilter
  role: StringFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input PasswordFilter {
  isSet: Boolean!
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  phone: OrderDirection
  role: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  password: String
  phone: String
  role: String
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  password: String
  phone: String
  role: String
}

type CraneEquipment {
  id: ID!
  name: String
  type: String
}

input CraneEquipmentWhereUniqueInput {
  id: ID
}

input CraneEquipmentWhereInput {
  AND: [CraneEquipmentWhereInput!]
  OR: [CraneEquipmentWhereInput!]
  NOT: [CraneEquipmentWhereInput!]
  id: IDFilter
  name: StringFilter
  type: StringFilter
}

input CraneEquipmentOrderByInput {
  id: OrderDirection
  name: OrderDirection
  type: OrderDirection
}

input CraneEquipmentUpdateInput {
  name: String
  type: String
}

input CraneEquipmentUpdateArgs {
  where: CraneEquipmentWhereUniqueInput!
  data: CraneEquipmentUpdateInput!
}

input CraneEquipmentCreateInput {
  name: String
  type: String
}

type Check {
  id: ID!
  name: String
  checkHours: Int
  checkDays: Int
  shutdownRequired: Boolean
  checkPoints(
    where: CheckPointWhereInput! = {}
    orderBy: [CheckPointOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [CheckPoint!]
  checkPointsCount(where: CheckPointWhereInput! = {}): Int
}

input CheckWhereUniqueInput {
  id: ID
}

input CheckWhereInput {
  AND: [CheckWhereInput!]
  OR: [CheckWhereInput!]
  NOT: [CheckWhereInput!]
  id: IDFilter
  name: StringFilter
  checkHours: IntNullableFilter
  checkDays: IntNullableFilter
  shutdownRequired: BooleanFilter
  checkPoints: CheckPointManyRelationFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input CheckPointManyRelationFilter {
  every: CheckPointWhereInput
  some: CheckPointWhereInput
  none: CheckPointWhereInput
}

input CheckOrderByInput {
  id: OrderDirection
  name: OrderDirection
  checkHours: OrderDirection
  checkDays: OrderDirection
  shutdownRequired: OrderDirection
}

input CheckUpdateInput {
  name: String
  checkHours: Int
  checkDays: Int
  shutdownRequired: Boolean
  checkPoints: CheckPointRelateToManyForUpdateInput
}

input CheckPointRelateToManyForUpdateInput {
  disconnect: [CheckPointWhereUniqueInput!]
  set: [CheckPointWhereUniqueInput!]
  create: [CheckPointCreateInput!]
  connect: [CheckPointWhereUniqueInput!]
}

input CheckUpdateArgs {
  where: CheckWhereUniqueInput!
  data: CheckUpdateInput!
}

input CheckCreateInput {
  name: String
  checkHours: Int
  checkDays: Int
  shutdownRequired: Boolean
  checkPoints: CheckPointRelateToManyForCreateInput
}

input CheckPointRelateToManyForCreateInput {
  create: [CheckPointCreateInput!]
  connect: [CheckPointWhereUniqueInput!]
}

type CheckPointGroup {
  id: ID!
  name: String
  checkPoints(
    where: CheckPointWhereInput! = {}
    orderBy: [CheckPointOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [CheckPoint!]
  checkPointsCount(where: CheckPointWhereInput! = {}): Int
}

input CheckPointGroupWhereUniqueInput {
  id: ID
}

input CheckPointGroupWhereInput {
  AND: [CheckPointGroupWhereInput!]
  OR: [CheckPointGroupWhereInput!]
  NOT: [CheckPointGroupWhereInput!]
  id: IDFilter
  name: StringFilter
  checkPoints: CheckPointManyRelationFilter
}

input CheckPointGroupOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input CheckPointGroupUpdateInput {
  name: String
  checkPoints: CheckPointRelateToManyForUpdateInput
}

input CheckPointGroupUpdateArgs {
  where: CheckPointGroupWhereUniqueInput!
  data: CheckPointGroupUpdateInput!
}

input CheckPointGroupCreateInput {
  name: String
  checkPoints: CheckPointRelateToManyForCreateInput
}

type CheckPoint {
  id: ID!
  name: String
  checkPointGroup: CheckPointGroup
}

input CheckPointWhereUniqueInput {
  id: ID
}

input CheckPointWhereInput {
  AND: [CheckPointWhereInput!]
  OR: [CheckPointWhereInput!]
  NOT: [CheckPointWhereInput!]
  id: IDFilter
  name: StringFilter
  checkPointGroup: CheckPointGroupWhereInput
}

input CheckPointOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input CheckPointUpdateInput {
  name: String
  checkPointGroup: CheckPointGroupRelateToOneForUpdateInput
}

input CheckPointGroupRelateToOneForUpdateInput {
  create: CheckPointGroupCreateInput
  connect: CheckPointGroupWhereUniqueInput
  disconnect: Boolean
}

input CheckPointUpdateArgs {
  where: CheckPointWhereUniqueInput!
  data: CheckPointUpdateInput!
}

input CheckPointCreateInput {
  name: String
  checkPointGroup: CheckPointGroupRelateToOneForCreateInput
}

input CheckPointGroupRelateToOneForCreateInput {
  create: CheckPointGroupCreateInput
  connect: CheckPointGroupWhereUniqueInput
}

type Part {
  id: ID!
  name: String
}

input PartWhereUniqueInput {
  id: ID
}

input PartWhereInput {
  AND: [PartWhereInput!]
  OR: [PartWhereInput!]
  NOT: [PartWhereInput!]
  id: IDFilter
  name: StringFilter
}

input PartOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input PartUpdateInput {
  name: String
}

input PartUpdateArgs {
  where: PartWhereUniqueInput!
  data: PartUpdateInput!
}

input PartCreateInput {
  name: String
}

type CheckedDetail {
  id: ID!
  date: DateTime
  readingMain: Int
  readingGen: Int
  worksDone: String
  check: Check
  checkPoints(
    where: CheckPointWhereInput! = {}
    orderBy: [CheckPointOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [CheckPoint!]
  checkPointsCount(where: CheckPointWhereInput! = {}): Int
  user: User
  equipment: CraneEquipment
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input CheckedDetailWhereUniqueInput {
  id: ID
}

input CheckedDetailWhereInput {
  AND: [CheckedDetailWhereInput!]
  OR: [CheckedDetailWhereInput!]
  NOT: [CheckedDetailWhereInput!]
  id: IDFilter
  date: DateTimeNullableFilter
  readingMain: IntNullableFilter
  readingGen: IntNullableFilter
  worksDone: StringFilter
  check: CheckWhereInput
  checkPoints: CheckPointManyRelationFilter
  user: UserWhereInput
  equipment: CraneEquipmentWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input CheckedDetailOrderByInput {
  id: OrderDirection
  date: OrderDirection
  readingMain: OrderDirection
  readingGen: OrderDirection
  worksDone: OrderDirection
}

input CheckedDetailUpdateInput {
  date: DateTime
  readingMain: Int
  readingGen: Int
  worksDone: String
  check: CheckRelateToOneForUpdateInput
  checkPoints: CheckPointRelateToManyForUpdateInput
  user: UserRelateToOneForUpdateInput
  equipment: CraneEquipmentRelateToOneForUpdateInput
}

input CheckRelateToOneForUpdateInput {
  create: CheckCreateInput
  connect: CheckWhereUniqueInput
  disconnect: Boolean
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input CraneEquipmentRelateToOneForUpdateInput {
  create: CraneEquipmentCreateInput
  connect: CraneEquipmentWhereUniqueInput
  disconnect: Boolean
}

input CheckedDetailUpdateArgs {
  where: CheckedDetailWhereUniqueInput!
  data: CheckedDetailUpdateInput!
}

input CheckedDetailCreateInput {
  date: DateTime
  readingMain: Int
  readingGen: Int
  worksDone: String
  check: CheckRelateToOneForCreateInput
  checkPoints: CheckPointRelateToManyForCreateInput
  user: UserRelateToOneForCreateInput
  equipment: CraneEquipmentRelateToOneForCreateInput
}

input CheckRelateToOneForCreateInput {
  create: CheckCreateInput
  connect: CheckWhereUniqueInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input CraneEquipmentRelateToOneForCreateInput {
  create: CraneEquipmentCreateInput
  connect: CraneEquipmentWhereUniqueInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createCraneEquipment(data: CraneEquipmentCreateInput!): CraneEquipment
  createCraneEquipments(data: [CraneEquipmentCreateInput!]!): [CraneEquipment]
  updateCraneEquipment(
    where: CraneEquipmentWhereUniqueInput!
    data: CraneEquipmentUpdateInput!
  ): CraneEquipment
  updateCraneEquipments(data: [CraneEquipmentUpdateArgs!]!): [CraneEquipment]
  deleteCraneEquipment(where: CraneEquipmentWhereUniqueInput!): CraneEquipment
  deleteCraneEquipments(
    where: [CraneEquipmentWhereUniqueInput!]!
  ): [CraneEquipment]
  createCheck(data: CheckCreateInput!): Check
  createChecks(data: [CheckCreateInput!]!): [Check]
  updateCheck(where: CheckWhereUniqueInput!, data: CheckUpdateInput!): Check
  updateChecks(data: [CheckUpdateArgs!]!): [Check]
  deleteCheck(where: CheckWhereUniqueInput!): Check
  deleteChecks(where: [CheckWhereUniqueInput!]!): [Check]
  createCheckPointGroup(data: CheckPointGroupCreateInput!): CheckPointGroup
  createCheckPointGroups(
    data: [CheckPointGroupCreateInput!]!
  ): [CheckPointGroup]
  updateCheckPointGroup(
    where: CheckPointGroupWhereUniqueInput!
    data: CheckPointGroupUpdateInput!
  ): CheckPointGroup
  updateCheckPointGroups(data: [CheckPointGroupUpdateArgs!]!): [CheckPointGroup]
  deleteCheckPointGroup(
    where: CheckPointGroupWhereUniqueInput!
  ): CheckPointGroup
  deleteCheckPointGroups(
    where: [CheckPointGroupWhereUniqueInput!]!
  ): [CheckPointGroup]
  createCheckPoint(data: CheckPointCreateInput!): CheckPoint
  createCheckPoints(data: [CheckPointCreateInput!]!): [CheckPoint]
  updateCheckPoint(
    where: CheckPointWhereUniqueInput!
    data: CheckPointUpdateInput!
  ): CheckPoint
  updateCheckPoints(data: [CheckPointUpdateArgs!]!): [CheckPoint]
  deleteCheckPoint(where: CheckPointWhereUniqueInput!): CheckPoint
  deleteCheckPoints(where: [CheckPointWhereUniqueInput!]!): [CheckPoint]
  createPart(data: PartCreateInput!): Part
  createParts(data: [PartCreateInput!]!): [Part]
  updatePart(where: PartWhereUniqueInput!, data: PartUpdateInput!): Part
  updateParts(data: [PartUpdateArgs!]!): [Part]
  deletePart(where: PartWhereUniqueInput!): Part
  deleteParts(where: [PartWhereUniqueInput!]!): [Part]
  createCheckedDetail(data: CheckedDetailCreateInput!): CheckedDetail
  createCheckedDetails(data: [CheckedDetailCreateInput!]!): [CheckedDetail]
  updateCheckedDetail(
    where: CheckedDetailWhereUniqueInput!
    data: CheckedDetailUpdateInput!
  ): CheckedDetail
  updateCheckedDetails(data: [CheckedDetailUpdateArgs!]!): [CheckedDetail]
  deleteCheckedDetail(where: CheckedDetailWhereUniqueInput!): CheckedDetail
  deleteCheckedDetails(
    where: [CheckedDetailWhereUniqueInput!]!
  ): [CheckedDetail]
  endSession: Boolean!
  authenticateUserWithPassword(
    phone: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  password: String
  phone: String
  role: String
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  craneEquipments(
    where: CraneEquipmentWhereInput! = {}
    orderBy: [CraneEquipmentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [CraneEquipment!]
  craneEquipment(where: CraneEquipmentWhereUniqueInput!): CraneEquipment
  craneEquipmentsCount(where: CraneEquipmentWhereInput! = {}): Int
  checks(
    where: CheckWhereInput! = {}
    orderBy: [CheckOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Check!]
  check(where: CheckWhereUniqueInput!): Check
  checksCount(where: CheckWhereInput! = {}): Int
  checkPointGroups(
    where: CheckPointGroupWhereInput! = {}
    orderBy: [CheckPointGroupOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [CheckPointGroup!]
  checkPointGroup(where: CheckPointGroupWhereUniqueInput!): CheckPointGroup
  checkPointGroupsCount(where: CheckPointGroupWhereInput! = {}): Int
  checkPoints(
    where: CheckPointWhereInput! = {}
    orderBy: [CheckPointOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [CheckPoint!]
  checkPoint(where: CheckPointWhereUniqueInput!): CheckPoint
  checkPointsCount(where: CheckPointWhereInput! = {}): Int
  parts(
    where: PartWhereInput! = {}
    orderBy: [PartOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Part!]
  part(where: PartWhereUniqueInput!): Part
  partsCount(where: PartWhereInput! = {}): Int
  checkedDetails(
    where: CheckedDetailWhereInput! = {}
    orderBy: [CheckedDetailOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [CheckedDetail!]
  checkedDetail(where: CheckedDetailWhereUniqueInput!): CheckedDetail
  checkedDetailsCount(where: CheckedDetailWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
